{"ast":null,"code":"var _jsxFileName = \"/Users/subramani.p/Documents/Medimine/medimine-frontend/src/components/UploadForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { config } from '../config';\nimport './UploadForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadForm = ({\n  onNewUpload\n}) => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [error, setError] = useState('');\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!file) {\n      setError('Please select a file to upload.');\n      return;\n    }\n    setIsUploading(true);\n    setError('');\n    try {\n      // 1. Get a pre-signed URL from our API\n      const presignedUrlResponse = await axios.post(`${config.API_URL}/presigned-url`, {\n        filename: file.name,\n        contentType: file.type // <-- ADD THIS LINE\n      });\n      const {\n        uploadUrl,\n        documentId\n      } = presignedUrlResponse.data;\n\n      // 2. Create a placeholder document to show in the UI immediately\n      const newDoc = {\n        documentId: documentId,\n        'brainstomers-01': documentId,\n        // To match your DynamoDB PK\n        filename: file.name,\n        status: 'Uploading...',\n        createdAt: Math.floor(Date.now() / 1000)\n      };\n      onNewUpload(newDoc); // Pass it to the Dashboard\n\n      // 3. Upload the file directly to S3 using the pre-signed URL\n      await axios.put(uploadUrl, file, {\n        headers: {\n          'Content-Type': file.type\n        }\n      });\n\n      // The S3 trigger will now automatically start the backend process.\n      // The WebSocket will handle updating the status from 'Uploading...' to 'Processing' and then 'Complete'.\n    } catch (err) {\n      console.error('Upload failed:', err);\n      setError('File upload failed. Please try again.');\n    } finally {\n      setIsUploading(false);\n      setFile(null);\n      e.target.reset(); // Clear the file input\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload a New Document\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"file-input-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-input-button\",\n          children: \"Choose File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleFileChange,\n          accept: \".pdf,.docx\",\n          disabled: isUploading,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 14\n      }, this), file && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"file-name\",\n        children: file.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"upload-button\",\n        disabled: isUploading || !file,\n        children: isUploading ? 'Uploading...' : 'Upload & Analyze'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadForm, \"LOuTmSv2Kfyk0kG5yL01D6HG8GY=\");\n_c = UploadForm;\nexport default UploadForm;\nvar _c;\n$RefreshReg$(_c, \"UploadForm\");","map":{"version":3,"names":["React","useState","axios","config","jsxDEV","_jsxDEV","UploadForm","onNewUpload","_s","file","setFile","isUploading","setIsUploading","error","setError","handleFileChange","e","target","files","handleSubmit","preventDefault","presignedUrlResponse","post","API_URL","filename","name","contentType","type","uploadUrl","documentId","data","newDoc","status","createdAt","Math","floor","Date","now","put","headers","err","console","reset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","accept","disabled","style","display","_c","$RefreshReg$"],"sources":["/Users/subramani.p/Documents/Medimine/medimine-frontend/src/components/UploadForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport { config } from '../config';\nimport './UploadForm.css'\n\nconst UploadForm = ({ onNewUpload }) => {\n    const [file, setFile] = useState(null);\n    const [isUploading, setIsUploading] = useState(false);\n    const [error, setError] = useState('');\n\n    const handleFileChange = (e) => {\n        setFile(e.target.files[0]);\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (!file) {\n            setError('Please select a file to upload.');\n            return;\n        }\n\n        setIsUploading(true);\n        setError('');\n\n        try {\n            // 1. Get a pre-signed URL from our API\n            const presignedUrlResponse = await axios.post(`${config.API_URL}/presigned-url`, {\n    filename: file.name,\n    contentType: file.type // <-- ADD THIS LINE\n});\n\n            const { uploadUrl, documentId } = presignedUrlResponse.data;\n\n            // 2. Create a placeholder document to show in the UI immediately\n            const newDoc = {\n                documentId: documentId,\n                'brainstomers-01': documentId, // To match your DynamoDB PK\n                filename: file.name,\n                status: 'Uploading...',\n                createdAt: Math.floor(Date.now() / 1000)\n            };\n            onNewUpload(newDoc); // Pass it to the Dashboard\n\n            // 3. Upload the file directly to S3 using the pre-signed URL\n            await axios.put(uploadUrl, file, {\n                headers: { 'Content-Type': file.type }\n            });\n\n            // The S3 trigger will now automatically start the backend process.\n            // The WebSocket will handle updating the status from 'Uploading...' to 'Processing' and then 'Complete'.\n\n        } catch (err) {\n            console.error('Upload failed:', err);\n            setError('File upload failed. Please try again.');\n        } finally {\n            setIsUploading(false);\n            setFile(null);\n            e.target.reset(); // Clear the file input\n        }\n    };\n\n    return (\n    <div className=\"upload-form-container\">\n        <h3>Upload a New Document</h3>\n        <form onSubmit={handleSubmit}>\n             <label className=\"file-input-wrapper\">\n                <span className=\"file-input-button\">Choose File</span>\n                <input type=\"file\" onChange={handleFileChange} accept=\".pdf,.docx\" disabled={isUploading} style={{ display: 'none' }} />\n            </label>\n            {file && <span className=\"file-name\">{file.name}</span>}\n            <button type=\"submit\" className=\"upload-button\" disabled={isUploading || !file}>\n                {isUploading ? 'Uploading...' : 'Upload & Analyze'}\n            </button>\n        </form>\n        {error && <p className=\"error-message\">{error}</p>}\n    </div>\n);\n};\n\nexport default UploadForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,WAAW;AAClC,OAAO,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMc,gBAAgB,GAAIC,CAAC,IAAK;IAC5BN,OAAO,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC9B,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOH,CAAC,IAAK;IAC9BA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClB,IAAI,CAACX,IAAI,EAAE;MACPK,QAAQ,CAAC,iCAAiC,CAAC;MAC3C;IACJ;IAEAF,cAAc,CAAC,IAAI,CAAC;IACpBE,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACA;MACA,MAAMO,oBAAoB,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAAC,GAAGnB,MAAM,CAACoB,OAAO,gBAAgB,EAAE;QACzFC,QAAQ,EAAEf,IAAI,CAACgB,IAAI;QACnBC,WAAW,EAAEjB,IAAI,CAACkB,IAAI,CAAC;MAC3B,CAAC,CAAC;MAEU,MAAM;QAAEC,SAAS;QAAEC;MAAW,CAAC,GAAGR,oBAAoB,CAACS,IAAI;;MAE3D;MACA,MAAMC,MAAM,GAAG;QACXF,UAAU,EAAEA,UAAU;QACtB,iBAAiB,EAAEA,UAAU;QAAE;QAC/BL,QAAQ,EAAEf,IAAI,CAACgB,IAAI;QACnBO,MAAM,EAAE,cAAc;QACtBC,SAAS,EAAEC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;MAC3C,CAAC;MACD9B,WAAW,CAACwB,MAAM,CAAC,CAAC,CAAC;;MAErB;MACA,MAAM7B,KAAK,CAACoC,GAAG,CAACV,SAAS,EAAEnB,IAAI,EAAE;QAC7B8B,OAAO,EAAE;UAAE,cAAc,EAAE9B,IAAI,CAACkB;QAAK;MACzC,CAAC,CAAC;;MAEF;MACA;IAEJ,CAAC,CAAC,OAAOa,GAAG,EAAE;MACVC,OAAO,CAAC5B,KAAK,CAAC,gBAAgB,EAAE2B,GAAG,CAAC;MACpC1B,QAAQ,CAAC,uCAAuC,CAAC;IACrD,CAAC,SAAS;MACNF,cAAc,CAAC,KAAK,CAAC;MACrBF,OAAO,CAAC,IAAI,CAAC;MACbM,CAAC,CAACC,MAAM,CAACyB,KAAK,CAAC,CAAC,CAAC,CAAC;IACtB;EACJ,CAAC;EAED,oBACArC,OAAA;IAAKsC,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBAClCvC,OAAA;MAAAuC,QAAA,EAAI;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9B3C,OAAA;MAAM4C,QAAQ,EAAE9B,YAAa;MAAAyB,QAAA,gBACxBvC,OAAA;QAAOsC,SAAS,EAAC,oBAAoB;QAAAC,QAAA,gBAClCvC,OAAA;UAAMsC,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACtD3C,OAAA;UAAOsB,IAAI,EAAC,MAAM;UAACuB,QAAQ,EAAEnC,gBAAiB;UAACoC,MAAM,EAAC,YAAY;UAACC,QAAQ,EAAEzC,WAAY;UAAC0C,KAAK,EAAE;YAAEC,OAAO,EAAE;UAAO;QAAE;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrH,CAAC,EACPvC,IAAI,iBAAIJ,OAAA;QAAMsC,SAAS,EAAC,WAAW;QAAAC,QAAA,EAAEnC,IAAI,CAACgB;MAAI;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACvD3C,OAAA;QAAQsB,IAAI,EAAC,QAAQ;QAACgB,SAAS,EAAC,eAAe;QAACS,QAAQ,EAAEzC,WAAW,IAAI,CAACF,IAAK;QAAAmC,QAAA,EAC1EjC,WAAW,GAAG,cAAc,GAAG;MAAkB;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CAAC,EACNnC,KAAK,iBAAIR,OAAA;MAAGsC,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAE/B;IAAK;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEV,CAAC;AAACxC,EAAA,CAxEIF,UAAU;AAAAiD,EAAA,GAAVjD,UAAU;AA0EhB,eAAeA,UAAU;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}